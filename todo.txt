Cool tech:
    https://www.npmjs.com/package/react-project
    lodash
    take a look at class names https://github.com/JedWatson/classnames
   
    symlinks - https://gist.github.com/branneman/8048520, https://github.com/DSKrepps/requireFrom, or maybe make a lib file similar to how you 
        handles cards and just dumb everything into there
    !!!http://moduscreate.com/es6-es2015-import-no-relative-path-webpack/  https://webpack.js.org/ some sample code is in
        e:/1 code lib
    you may just need to take a webpack tutt
    https://www.fullstackreact.com/p/using-webpack-with-create-react-app/

    packages to include
        https://www.npmjs.com/package/babel-plugin-react-html-attrs
        ***https://www.npmjs.com/package/babel-plugin-offside-js***
        try to fix syntax highlighting for jsy https://stackoverflow.com/questions/30775551/how-to-manually-set-language-for-syntax-highlighting-in-visual-studio-code
        https://code.visualstudio.com/docs/extensions/themes-snippets-colorizers
        


done:
    set up express
    render project start
    install react and get a landing page
    modularize componants
    pass variables through parent/child/ sibling 
    onclick and onHover events
    import and use semantic
    incorporate routing
    put some cards on screen
    pull in all of your dominion code
    finish new game button
    dynamic screen reresh by adjusting state <-- dont try to work around state and props just use em
    all cards including played and draw hand
    add in redux store to make keeping track of cards easier -switching to mobx
    take a look at flux and dispatchers https://www.youtube.com/watch?v=MZfCVq5iCBw&list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b&index=9#t=35.959125
    take a look at redux https://www.youtube.com/watch?v=1w-oQ-i1XB8&index=15&list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b
    install and edit rewire to allow for mobx decorators (yes this would have been WAAAAY easier to jus tmanually adjust the config in node modules)
    fix vs code error with ts config (which is funny that its js but whatever)
    get a mobx store working
    finish mobx tutorial for full front end cruds
    save game state in mobx
    use appstore to allow hand cards to go to played cards
    do same with on click
    fix played cards
    fix updating first players draw hand display something is breaking in the timeing
    add onclick actions



rightnow:
    there is a bug in moving cards to played... none of the stats are comeing over and it's deleting the score 
    it looks like it has somethign to do with mobx mutating the card object into observable arrays   
    add stats for player and game
    initialize game loop

    move files over to classes folder
    
    
    manage data with props and state and context

near term:
    make a save game button to push to local storage
    have new game clear saved game in local storage
    add card on play methods
    manage player log in 
    figure out the difference between js and jsx

midterm:
    hot seat play
    to get persitant state looks like I'm going to need a store like flux or redux
    look at creating a object called data store and useing that instance inleu of redux
    or use local storage



long term :
    import routes to avoid from "../../../garbage" ... my first attempt didnt work come back to this later
    symlinks needs to be next i think
    save player stats to db
    save game state (maybe to database?)
    will want sockets.io
    get npm start to run a better .bat file with mongo and rebuild
    ensure that babel is working???
    incorporate offside-jsy
    figure out .js vs .jsx
    learn lodash
    use object.assign({}, foo) to get around passing objects by refrerence


For fun:
    add mouse hover or right click inspect of cards
    grab some card art http://wiki.dominionstrategy.com/index.php/Isotropic_art_gallery


Notes:
    right now to use @ decorators (which is most mobx tutts) you need to add the transform-decorators-legacy
    yourself in node_modules/react-scripts/config/babel.dev.js, as I don't want to go tinkering around with
    the out of the box code just yet just use the observer functions instead of the decorators
    

    
   